// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/my_test_grpc_plugin.proto

package my_test_grpc_plugin

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Field1 int32    `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 int64    `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 float64  `protobuf:"fixed64,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4 string   `protobuf:"bytes,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5 []byte   `protobuf:"bytes,5,opt,name=field5,proto3" json:"field5,omitempty"`
	Field6 []string `protobuf:"bytes,6,rep,name=field6,proto3" json:"field6,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b06b1e5fa595b1e, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetField1() int32 {
	if m != nil {
		return m.Field1
	}
	return 0
}

func (m *Request) GetField2() int64 {
	if m != nil {
		return m.Field2
	}
	return 0
}

func (m *Request) GetField3() float64 {
	if m != nil {
		return m.Field3
	}
	return 0
}

func (m *Request) GetField4() string {
	if m != nil {
		return m.Field4
	}
	return ""
}

func (m *Request) GetField5() []byte {
	if m != nil {
		return m.Field5
	}
	return nil
}

func (m *Request) GetField6() []string {
	if m != nil {
		return m.Field6
	}
	return nil
}

type Response struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b06b1e5fa595b1e, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

var E_PluginName = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51235,
	Name:          "grpc_plugin.plugin_name",
	Tag:           "bytes,51235,opt,name=plugin_name",
	Filename:      "proto/my_test_grpc_plugin.proto",
}

func init() {
	proto.RegisterType((*Request)(nil), "grpc_plugin.Request")
	proto.RegisterType((*Response)(nil), "grpc_plugin.Response")
	proto.RegisterExtension(E_PluginName)
}

func init() { proto.RegisterFile("proto/my_test_grpc_plugin.proto", fileDescriptor_0b06b1e5fa595b1e) }

var fileDescriptor_0b06b1e5fa595b1e = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbf, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0xcf, 0xa4, 0x3d, 0xa8, 0x0f, 0x89, 0xca, 0x02, 0x14, 0x32, 0xa4, 0x51, 0xa7, 0x2c,
	0x4d, 0x68, 0xae, 0xed, 0x50, 0x26, 0x10, 0x3f, 0x26, 0xa0, 0x0a, 0x20, 0x10, 0x4b, 0x94, 0xf3,
	0xbd, 0x3a, 0x91, 0x92, 0x3c, 0x63, 0x3b, 0x88, 0x5b, 0x99, 0x18, 0xbb, 0xc2, 0xca, 0x3f, 0xc3,
	0xd8, 0x91, 0x11, 0xdd, 0xfd, 0x23, 0xe8, 0x12, 0x13, 0x4e, 0x15, 0x0b, 0xdb, 0xf3, 0xc7, 0x5f,
	0xfb, 0xfb, 0x7e, 0xd1, 0x3d, 0xa9, 0xd0, 0x60, 0x5c, 0x2f, 0x32, 0x03, 0xda, 0x64, 0x42, 0x49,
	0x9e, 0xc9, 0xaa, 0x15, 0x65, 0x13, 0x75, 0x37, 0x6c, 0xb2, 0x81, 0xbc, 0x40, 0x20, 0x8a, 0x0a,
	0xe2, 0xee, 0x6a, 0xd6, 0x9e, 0xc7, 0x73, 0xd0, 0x5c, 0x95, 0xd2, 0xa0, 0xea, 0xe5, 0xde, 0x81,
	0x28, 0x4d, 0xd1, 0xce, 0x22, 0x8e, 0x75, 0x2c, 0x50, 0xe0, 0x5f, 0xe9, 0xfa, 0xd4, 0x9b, 0xad,
	0xa3, 0x5e, 0xbe, 0xff, 0x95, 0xd0, 0xeb, 0x29, 0x7c, 0x68, 0x41, 0x1b, 0x76, 0x97, 0x8e, 0xcf,
	0x4b, 0xa8, 0xe6, 0x87, 0x2e, 0x09, 0x48, 0xb8, 0x9d, 0xda, 0xd3, 0xc0, 0x13, 0xf7, 0x5a, 0x40,
	0x42, 0xc7, 0xf2, 0x64, 0xe0, 0x53, 0xd7, 0x09, 0x48, 0x48, 0x2c, 0x9f, 0x0e, 0xfc, 0xc8, 0xdd,
	0x0a, 0x48, 0xb8, 0x63, 0xf9, 0xd1, 0xc0, 0x8f, 0xdd, 0xed, 0x80, 0x84, 0x37, 0x2d, 0x3f, 0x1e,
	0xf8, 0x89, 0x3b, 0x0e, 0x9c, 0x41, 0x7f, 0xb2, 0x7f, 0x9f, 0xde, 0x48, 0x41, 0x4b, 0x6c, 0x34,
	0x30, 0x46, 0xb7, 0x38, 0xce, 0xc1, 0x66, 0xd6, 0xc5, 0x6c, 0x97, 0x3a, 0xb5, 0x16, 0x5d, 0x52,
	0x3b, 0xe9, 0x3a, 0x4c, 0xde, 0xd2, 0xdd, 0xe7, 0x8b, 0xd7, 0xa0, 0xcd, 0x33, 0x25, 0xf9, 0x59,
	0xd7, 0x32, 0x96, 0x50, 0x47, 0xb5, 0x0d, 0xbb, 0x1d, 0x6d, 0xb6, 0xd6, 0x96, 0xec, 0xdd, 0xb9,
	0x42, 0x7b, 0x37, 0xef, 0xd6, 0xb7, 0xcf, 0xf7, 0x26, 0xf5, 0xc2, 0xf2, 0xec, 0x30, 0x79, 0x47,
	0xbd, 0xab, 0x1f, 0x3f, 0x45, 0xf5, 0xb0, 0x41, 0x53, 0x80, 0x62, 0xa7, 0x74, 0x72, 0xa6, 0x90,
	0x83, 0xd6, 0x8f, 0x73, 0x93, 0xff, 0x97, 0xd5, 0xe9, 0x13, 0x3a, 0xb1, 0x2e, 0x4d, 0x5e, 0x03,
	0xdb, 0x8b, 0xfa, 0x09, 0x47, 0x7f, 0xc6, 0x16, 0xbd, 0x02, 0xf5, 0xb1, 0xe4, 0xf0, 0x52, 0x9a,
	0x12, 0x1b, 0xed, 0x7e, 0xbf, 0x70, 0xba, 0x7a, 0x69, 0xff, 0xea, 0x45, 0x5e, 0xc3, 0x17, 0x42,
	0x1e, 0xbd, 0xf9, 0xb1, 0xf4, 0xc9, 0xe5, 0xd2, 0x27, 0xbf, 0x96, 0x3e, 0xb9, 0x58, 0xf9, 0xa3,
	0xcb, 0x95, 0x3f, 0xfa, 0xb9, 0xf2, 0x47, 0xef, 0x1f, 0x6c, 0x2c, 0x44, 0x91, 0xeb, 0xa2, 0xe4,
	0xa8, 0x64, 0x2c, 0xf0, 0xa0, 0xff, 0x20, 0x86, 0x4f, 0x79, 0x2d, 0x2b, 0xd0, 0xff, 0x5a, 0xc1,
	0xd9, 0xb8, 0x4b, 0x63, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x64, 0xc4, 0x8d, 0xa6, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyTestGrpcPluginClient is the client API for MyTestGrpcPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyTestGrpcPluginClient interface {
	Run(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type myTestGrpcPluginClient struct {
	cc *grpc.ClientConn
}

func NewMyTestGrpcPluginClient(cc *grpc.ClientConn) MyTestGrpcPluginClient {
	return &myTestGrpcPluginClient{cc}
}

func (c *myTestGrpcPluginClient) Run(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc_plugin.MyTestGrpcPlugin/run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyTestGrpcPluginServer is the server API for MyTestGrpcPlugin service.
type MyTestGrpcPluginServer interface {
	Run(context.Context, *Request) (*Response, error)
}

// UnimplementedMyTestGrpcPluginServer can be embedded to have forward compatible implementations.
type UnimplementedMyTestGrpcPluginServer struct {
}

func (*UnimplementedMyTestGrpcPluginServer) Run(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}

func RegisterMyTestGrpcPluginServer(s *grpc.Server, srv MyTestGrpcPluginServer) {
	s.RegisterService(&_MyTestGrpcPlugin_serviceDesc, srv)
}

func _MyTestGrpcPlugin_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyTestGrpcPluginServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_plugin.MyTestGrpcPlugin/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyTestGrpcPluginServer).Run(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyTestGrpcPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_plugin.MyTestGrpcPlugin",
	HandlerType: (*MyTestGrpcPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "run",
			Handler:    _MyTestGrpcPlugin_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/my_test_grpc_plugin.proto",
}

// MyTestGrpcPluginForAnotherClient is the client API for MyTestGrpcPluginForAnother service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyTestGrpcPluginForAnotherClient interface {
	ProcessData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type myTestGrpcPluginForAnotherClient struct {
	cc *grpc.ClientConn
}

func NewMyTestGrpcPluginForAnotherClient(cc *grpc.ClientConn) MyTestGrpcPluginForAnotherClient {
	return &myTestGrpcPluginForAnotherClient{cc}
}

func (c *myTestGrpcPluginForAnotherClient) ProcessData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc_plugin.MyTestGrpcPluginForAnother/ProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyTestGrpcPluginForAnotherServer is the server API for MyTestGrpcPluginForAnother service.
type MyTestGrpcPluginForAnotherServer interface {
	ProcessData(context.Context, *Request) (*Response, error)
}

// UnimplementedMyTestGrpcPluginForAnotherServer can be embedded to have forward compatible implementations.
type UnimplementedMyTestGrpcPluginForAnotherServer struct {
}

func (*UnimplementedMyTestGrpcPluginForAnotherServer) ProcessData(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessData not implemented")
}

func RegisterMyTestGrpcPluginForAnotherServer(s *grpc.Server, srv MyTestGrpcPluginForAnotherServer) {
	s.RegisterService(&_MyTestGrpcPluginForAnother_serviceDesc, srv)
}

func _MyTestGrpcPluginForAnother_ProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyTestGrpcPluginForAnotherServer).ProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_plugin.MyTestGrpcPluginForAnother/ProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyTestGrpcPluginForAnotherServer).ProcessData(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyTestGrpcPluginForAnother_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_plugin.MyTestGrpcPluginForAnother",
	HandlerType: (*MyTestGrpcPluginForAnotherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessData",
			Handler:    _MyTestGrpcPluginForAnother_ProcessData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/my_test_grpc_plugin.proto",
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Field6) > 0 {
		for iNdEx := len(m.Field6) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Field6[iNdEx])
			copy(dAtA[i:], m.Field6[iNdEx])
			i = encodeVarintMyTestGrpcPlugin(dAtA, i, uint64(len(m.Field6[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Field5) > 0 {
		i -= len(m.Field5)
		copy(dAtA[i:], m.Field5)
		i = encodeVarintMyTestGrpcPlugin(dAtA, i, uint64(len(m.Field5)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Field4) > 0 {
		i -= len(m.Field4)
		copy(dAtA[i:], m.Field4)
		i = encodeVarintMyTestGrpcPlugin(dAtA, i, uint64(len(m.Field4)))
		i--
		dAtA[i] = 0x22
	}
	if m.Field3 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Field3))))
		i--
		dAtA[i] = 0x19
	}
	if m.Field2 != 0 {
		i = encodeVarintMyTestGrpcPlugin(dAtA, i, uint64(m.Field2))
		i--
		dAtA[i] = 0x10
	}
	if m.Field1 != 0 {
		i = encodeVarintMyTestGrpcPlugin(dAtA, i, uint64(m.Field1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMyTestGrpcPlugin(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintMyTestGrpcPlugin(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMyTestGrpcPlugin(dAtA []byte, offset int, v uint64) int {
	offset -= sovMyTestGrpcPlugin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field1 != 0 {
		n += 1 + sovMyTestGrpcPlugin(uint64(m.Field1))
	}
	if m.Field2 != 0 {
		n += 1 + sovMyTestGrpcPlugin(uint64(m.Field2))
	}
	if m.Field3 != 0 {
		n += 9
	}
	l = len(m.Field4)
	if l > 0 {
		n += 1 + l + sovMyTestGrpcPlugin(uint64(l))
	}
	l = len(m.Field5)
	if l > 0 {
		n += 1 + l + sovMyTestGrpcPlugin(uint64(l))
	}
	if len(m.Field6) > 0 {
		for _, s := range m.Field6 {
			l = len(s)
			n += 1 + l + sovMyTestGrpcPlugin(uint64(l))
		}
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMyTestGrpcPlugin(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMyTestGrpcPlugin(uint64(l))
	}
	return n
}

func sovMyTestGrpcPlugin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMyTestGrpcPlugin(x uint64) (n int) {
	return sovMyTestGrpcPlugin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyTestGrpcPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			m.Field1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyTestGrpcPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			m.Field2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyTestGrpcPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Field3 = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyTestGrpcPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyTestGrpcPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMyTestGrpcPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyTestGrpcPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMyTestGrpcPlugin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMyTestGrpcPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field5 = append(m.Field5[:0], dAtA[iNdEx:postIndex]...)
			if m.Field5 == nil {
				m.Field5 = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyTestGrpcPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyTestGrpcPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMyTestGrpcPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field6 = append(m.Field6, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMyTestGrpcPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMyTestGrpcPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyTestGrpcPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyTestGrpcPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyTestGrpcPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyTestGrpcPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMyTestGrpcPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMyTestGrpcPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMyTestGrpcPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMyTestGrpcPlugin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMyTestGrpcPlugin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMyTestGrpcPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMyTestGrpcPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMyTestGrpcPlugin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMyTestGrpcPlugin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMyTestGrpcPlugin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMyTestGrpcPlugin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMyTestGrpcPlugin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMyTestGrpcPlugin = fmt.Errorf("proto: unexpected end of group")
)
